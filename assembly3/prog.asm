DATA SEGMENT
MESSAGE0 DB 'INPUT 10 DECIMAL NUMBER:',0DH,0AH,'$'
MESSAGE1 DB 'YOU HAVE INPUT: ','$'
MESSAGE2 DB 0DH,0AH,'YOU HAVE TO INPUT ANOTHER $'
MESSAGE3 DB ' NUMBERS.',0DH,0AH,'$'
ERROR1 DB 0DH,0AH,'NOT DECIMAL NUMBER!',0DH,0AH,'$'
ERROR2 DB 0DH,0AH,'TOO MANY DIGITS',0DH,0AH,'$'
SORT DB '>>> AFTER SORTED <<<',0DH,0AH,'$'
MAX DB '>>> MAX NUMBER: ','$'
AUX DB '10','$'
ORG 1000H
NUMBERS DB 10 DUP(?) 
DATA ENDS

STACK SEGMENT PARA STACK
DB 10 DUP(?)
STACK ENDS

CODE SEGMENT 
ASSUME ES:DATA,DS:DATA,CS:CODE,SS:STACK
START:
MOV AX,DATA
MOV ES,AX
MOV DS,AX
MOV AX,STACK
MOV SS,AX
LEA DI,NUMBERS
MOV CL,4
;READ IN 10 NUMBERS
MOV DX,OFFSET MESSAGE0
MOV AH,09H
INT 21H
ADD DI,09H
L1:
	;IO AND REFINE THE FORMAT
	MOV AH,08H
	INT 21H
	MOV DL,AL
	CMP DL,0DH
	JNE L2
	MOV DL,' '
	L2:
	MOV AH,02H
	INT 21H
	;WORD IN DL
	;SET THE WORD IN DH
	CMP DL,030H
	JB NOTNUM
	CMP DL,039H
	JA NOTNUM
	;NOW THE INPUT SHOULD BE A NUMBER
	;CHECK THE DH
	CMP DH,00FH
	JA OVER
	;NOW EVERYTHING OK
	AND DL,00FH
	SHL DH,CL
	ADD DH,DL
	JMP L1
	NOTNUM:
		;CHECK THE ' ' 
		CMP DL,' '
		JE L3
		MOV DX,OFFSET ERROR1
		MOV AH,09H
		INT 21H
		JMP L6
	OVER:
		MOV DX,OFFSET ERROR2
		MOV AH,09H
		INT 21H
		L6:
		CALL CORRECT
		JMP L1
	L3:
	CMP DH,0
	JE L1
	OUTPUT:
	MOV BYTE PTR [DI],DH
	DEC DI
	MOV DH,0
	CMP DI,OFFSET NUMBERS
JNB L1
MOV BX,OFFSET MESSAGE1
CALL WHOLE
L11:
	MOV DL,0
	MOV CX,9
	LEA DI,NUMBERS
	L12:
		MOV AX,[DI]
		CMP AL,AH
		JNA NORM
		MOV DL,1
		XCHG AL,AH
		MOV [DI],AX
		NORM:
		INC DI
		LOOP L12
	CMP DL,0
JNE L11
MOV CL,4
MOV AH,02H
MOV DL,0DH
INT 21H
MOV DL,0AH
INT 21H
MOV DX,OFFSET MAX
MOV AH,09H
INT 21H
MOV AH,02H
LEA SI,NUMBERS
ADD SI,09H
MOV AH,02H
MOV DL,BYTE PTR [SI]
MOV DH,DL
SHR DL,CL
JZ L13
ADD DL,030H
INT 21H
L13:
AND DH,00FH
ADD DH,030H
MOV DL,DH
INT 21H
MOV DL,0DH
INT 21H
MOV DL,0AH
INT 21H

MOV BX,OFFSET SORT
CALL WHOLE
MOV AL,0
MOV AH,04CH
INT 021H

CORRECT:
	CALL SHOW
	MOV DX,OFFSET MESSAGE2
	MOV AH,09H
	INT 21H
	MOV DX,DI
	SUB DX,OFFSET NUMBERS
	INC DL
	CMP DL,0AH
	JNE L4
	MOV DX,OFFSET AUX
	MOV AH,09H
	JMP L5
	L4:
	ADD DL,030H
	MOV AH,02H
	L5:
	INT 21H
	MOV DX,OFFSET MESSAGE3
	MOV AH,09H
	INT 21H	
	RET 
	
SHOW:
	MOV DX,OFFSET MESSAGE1
	MOV AH,09H
	INT 21H
	LEA SI,NUMBERS
	ADD SI,09H
	MOV AH,02H
	CMP DI,SI
	JE FIN
	L7:
		MOV DL,BYTE PTR [SI]
		MOV DH,DL
		SHR DL,CL
		JZ L10
		ADD DL,030H
		INT 21H
		L10:
		AND DH,00FH
		ADD DH,030H
		MOV DL,DH
		INT 21H
		MOV DL,' '
		INT 21H
		DEC SI
		CMP SI,DI
		JNE L7
	FIN:
	RET
WHOLE:
MOV AH,02H
MOV DL,0DH
INT 21H
MOV DL,0AH
INT 21H
MOV DX,BX
MOV AH,09H
INT 21H
MOV AH,02H
MOV DL,0DH
INT 21H
MOV DL,0AH
INT 21H
LEA SI,NUMBERS
ADD SI,09H
MOV AH,02H
L8:
	MOV DL,BYTE PTR [SI]
	MOV DH,DL
	SHR DL,CL
	JZ L9
	ADD DL,030H
	INT 21H
	L9:
	AND DH,00FH
	ADD DH,030H
	MOV DL,DH
	INT 21H
	MOV DL,0DH
	INT 21H
	MOV DL,0AH
	INT 21H
	DEC SI
	CMP SI,OFFSET NUMBERS
	JNS L8
	RET
CODE ENDS
END START
